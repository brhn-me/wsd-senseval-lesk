import nltk
nltk.download('stopwords')
from nltk.corpus import wordnet as wn
from nltk.corpus import stopwords


##########################################
def extend_sig(sig):
    lemma_names_set = set()
    stop_words = set(stopwords.words("english"))
    sig = sig - stop_words


    for term in sig:
        lemma_names_set.add(term)

        synsets = wordnet.synsets(term)

        # for each synset, find its hyponyms and hypernyms
        for synset in synsets:
            hyponyms_set = set()
            hypernyms_set = set()

            hyponyms_set.update(synset.hyponyms())
            hypernyms_set.update(synset.hypernyms())

            hyponyms_and_hypernyms_set = hyponyms_set.union(hypernyms_set)

            for synset in hyponyms_and_hypernyms_set:
                for lemma in synset.lemmas():
                    l = lemma.name().lower().replace('_', ' ').replace('-', ' ')

                    words = l.split()

                    lemma_names_set.update(words)

    # return extended signature
    return lemma_names_set

##########################################

"The exam was too hard for the studensts to pass"
'I am going to the bank with some money'

cotext_sentence = "The exam was too hard for the studensts to pass"
amb_word = "hard"

max_overlap = 0
lesk_sense = None
lesk_definition = ''
context_words = nltk.word_tokenize(cotext_sentence)
context_words = set(context_words)

for sense in wn.synsets(amb_word):
    print(f"sense: {sense}")
    signature = set()
    sense_definitions = nltk.word_tokenize(sense.definition())
    #print(f'sense_definitions : {sense_definitions}')
    signature = signature.union(set(sense_definitions))
    signature = signature.union(set(sense.lemma_names()))
    #print(f"examples: {sense.examples()}")
    for example in sense.examples():
        signature = signature.union(set(example.split()))
    #print(f"signature: {signature}")
    signature = extend_sig(signature)
    print(f"extended_signature: {signature}")
    overlap  = len(context_words.intersection(signature))
    if overlap > max_overlap:
        lesk_sense = sense
        max_overlap = overlap
        lesk_definition = sense.definition()

print(lesk_sense)
print(lesk_definition)